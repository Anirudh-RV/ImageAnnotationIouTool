{"ast":null,"code":"var _jsxFileName = \"/Users/anirudhrv/Desktop/Misc/InteractiveImageAnnotation/Application/ImageAnnotation/Client/src/SPA_components/UploadMultipleFiles.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Progress } from 'reactstrap';\n\nclass UploadMultipleFiles extends Component {\n  constructor(props) {\n    super(props);\n\n    this.checkMimeType = event => {\n      //getting file object\n      let files = event.target.files; //define message container\n\n      let err = []; // list allow mime type\n\n      const types = ['image/png', 'image/jpeg', 'image/gif']; // loop access array\n\n      for (var x = 0; x < files.length; x++) {\n        // compare file type find doesn't matach\n        if (types.every(type => files[x].type !== type)) {\n          // create error message and assign to container\n          err[x] = files[x].type + ' is not a supported format\\n';\n        }\n      }\n\n      ;\n\n      for (var z = 0; z < err.length; z++) {\n        // if message not same old that mean has error\n        // discard selected file\n        event.target.value = null;\n      }\n\n      return true;\n    };\n\n    this.maxSelectFile = event => {\n      let files = event.target.files;\n\n      if (files.length > 10) {\n        const msg = 'Only 10 images can be uploaded at a time';\n        event.target.value = null;\n        return false;\n      }\n\n      return true;\n    };\n\n    this.checkFileSize = event => {\n      let files = event.target.files;\n      let size = 2000000;\n      let err = [];\n\n      for (var x = 0; x < files.length; x++) {\n        if (files[x].size > size) {\n          err[x] = files[x].type + 'is too large, please pick a smaller file\\n';\n        }\n      }\n\n      ;\n\n      for (var z = 0; z < err.length; z++) {\n        // if message not same old that mean has error\n        // discard selected file\n        event.target.value = null;\n      }\n\n      return true;\n    };\n\n    this.addToBackendUsingApi = files => {\n      var userName = this.props.location.state.userName;\n      var fileNames = userName + \",\";\n\n      for (var x = 0; x < files.length - 1; x++) {\n        fileNames = fileNames + files[x].name + \",\";\n      }\n\n      fileNames = fileNames + files[files.length - 1].name; // api call\n\n      console.log(\"Calling GO API at 8080 : \");\n      console.log(fileNames);\n      axios.post(\"http://localhost:8080/insertimagedata\", fileNames).then(res => {\n        // then print response status\n        //toast.success('upload success')\n        console.log(\"API message : \");\n        console.log(res);\n      }).catch(err => {\n        // then print response status\n        //  toast.error('upload fail')\n        console.log(err);\n      });\n    };\n\n    this.onChangeHandler = event => {\n      var files = event.target.files;\n\n      if (this.maxSelectFile(event) && this.checkMimeType(event) && this.checkFileSize(event)) {\n        // if return true allow to setState\n        this.setState({\n          selectedFile: files,\n          loaded: 0\n        });\n      }\n    };\n\n    this.RedirecToEditPage = () => {\n      var userName = this.props.location.state.userName;\n      this.props.history.push({\n        pathname: '/EditPage',\n        state: {\n          userName: this.props.location.state.userName\n        }\n      });\n    };\n\n    this.onClickHandler = () => {\n      const data = new FormData(); // getting username from input\n\n      var userName = this.props.location.state.userName; // filling FormData with selectedFiles(Array of objects)\n\n      for (var x = 0; x < this.state.selectedFile.length; x++) {\n        data.append('file', this.state.selectedFile[x]);\n      } // header carries information of username to backend with data\n\n\n      axios.post(\"http://localhost:4000/upload\", data, {\n        headers: {\n          userName: userName\n        },\n        onUploadProgress: ProgressEvent => {\n          this.setState({\n            loaded: ProgressEvent.loaded / ProgressEvent.total * 100\n          });\n        }\n      }).then(res => {\n        // then print response status\n        //toast.success('upload success')\n        this.addToBackendUsingApi(this.state.selectedFile);\n        console.log(\"Upload success:\\n\" + res); // redirect to WorkingArea.js for viewing images\n      }).catch(err => {\n        // then print response status\n        //  toast.error('upload fail')\n        console.log(\"Upload fail\" + err);\n      });\n    };\n\n    this.state = {\n      selectedFile: null,\n      loaded: 0\n    };\n  }\n\n  componentDidMount() {\n    // set UserName\n    console.log(this.props.location.state.userName);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      class: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"offset-md-3 col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"form-group files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Upload Your File \"), React.createElement(\"input\", {\n      id: \"input_upload\",\n      type: \"file\",\n      class: \"form-control\",\n      multiple: true,\n      onChange: this.onChangeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      class: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(Progress, {\n      max: \"100\",\n      color: \"success\",\n      value: this.state.loaded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, Math.round(this.state.loaded, 2), \"%\")), React.createElement(\"button\", {\n      type: \"button\",\n      class: \"buttonclass\",\n      onClick: this.onClickHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Upload\"), React.createElement(\"button\", {\n      type: \"button\",\n      class: \"buttonclass\",\n      onClick: this.RedirecToEditPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"View Images\"), React.createElement(\"button\", {\n      type: \"button\",\n      class: \"buttonclass\",\n      onClick: this.RedirecToEditPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Log out\"))));\n  }\n\n}\n\nexport default UploadMultipleFiles;","map":{"version":3,"sources":["/Users/anirudhrv/Desktop/Misc/InteractiveImageAnnotation/Application/ImageAnnotation/Client/src/SPA_components/UploadMultipleFiles.js"],"names":["React","Component","axios","Progress","UploadMultipleFiles","constructor","props","checkMimeType","event","files","target","err","types","x","length","every","type","z","value","maxSelectFile","msg","checkFileSize","size","addToBackendUsingApi","userName","location","state","fileNames","name","console","log","post","then","res","catch","onChangeHandler","setState","selectedFile","loaded","RedirecToEditPage","history","push","pathname","onClickHandler","data","FormData","append","headers","onUploadProgress","ProgressEvent","total","componentDidMount","render","Math","round"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport {Progress} from 'reactstrap';\n\n\nclass UploadMultipleFiles extends Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        selectedFile: null,\n        loaded:0\n      }\n\n  }\n  checkMimeType=(event)=>{\n    //getting file object\n    let files = event.target.files\n    //define message container\n    let err = []\n    // list allow mime type\n   const types = ['image/png', 'image/jpeg', 'image/gif']\n    // loop access array\n    for(var x = 0; x<files.length; x++) {\n     // compare file type find doesn't matach\n         if (types.every(type => files[x].type !== type)) {\n         // create error message and assign to container\n         err[x] = files[x].type+' is not a supported format\\n';\n       }\n     };\n     for(var z = 0; z<err.length; z++) {// if message not same old that mean has error\n         // discard selected file\n        event.target.value = null\n    }\n   return true;\n  }\n  maxSelectFile=(event)=>{\n    let files = event.target.files\n        if (files.length > 10) {\n           const msg = 'Only 10 images can be uploaded at a time'\n           event.target.value = null\n           return false;\n      }\n    return true;\n }\n checkFileSize=(event)=>{\n  let files = event.target.files\n  let size = 2000000\n  let err = [];\n  for(var x = 0; x<files.length; x++) {\n  if (files[x].size > size) {\n   err[x] = files[x].type+'is too large, please pick a smaller file\\n';\n }\n};\nfor(var z = 0; z<err.length; z++) {// if message not same old that mean has error\n  // discard selected file\n event.target.value = null\n}\nreturn true;\n}\n\n// using Api, add names of the images being uploaded to a database\n  addToBackendUsingApi = (files) =>{\n\n      var userName = this.props.location.state.userName;\n\n      var fileNames = userName+\",\";\n      for(var x =0; x<files.length-1;x++)\n      {\n        fileNames = fileNames +files[x].name+ \",\";\n      }\n      fileNames = fileNames + files[files.length-1].name;\n      // api call\n      console.log(\"Calling GO API at 8080 : \")\n      console.log(fileNames)\n      axios.post(\"http://localhost:8080/insertimagedata\",fileNames)\n        .then(res => { // then print response status\n          //toast.success('upload success')\n          console.log(\"API message : \")\n          console.log(res)\n        })\n        .catch(err => { // then print response status\n        //  toast.error('upload fail')\n        console.log(err)\n        })\n}\n\nonChangeHandler=event=>{\n  var files = event.target.files\n  if(this.maxSelectFile(event) && this.checkMimeType(event) &&    this.checkFileSize(event)){\n  // if return true allow to setState\n     this.setState({\n     selectedFile: files,\n     loaded:0\n  })\n}\n}\n\nRedirecToEditPage = () =>{\n\n  var userName = this.props.location.state.userName;\n\n  this.props.history.push({\n    pathname: '/EditPage',\n    state: {userName: this.props.location.state.userName}\n})\n\n}\n  onClickHandler = () => {\n    const data = new FormData()\n\n// getting username from input\n    var userName = this.props.location.state.userName;\n\n// filling FormData with selectedFiles(Array of objects)\n    for(var x = 0; x<this.state.selectedFile.length; x++) {\n      data.append('file', this.state.selectedFile[x])\n    }\n\n// header carries information of username to backend with data\n    axios.post(\"http://localhost:4000/upload\",data,\n    {\n    headers: {\n      userName: userName\n    },\n      onUploadProgress: ProgressEvent => {\n        this.setState({\n          loaded: (ProgressEvent.loaded / ProgressEvent.total*100),\n        })\n      },\n    })\n      .then(res => { // then print response status\n        //toast.success('upload success')\n        this.addToBackendUsingApi(this.state.selectedFile)\n        console.log(\"Upload success:\\n\"+res)\n        // redirect to WorkingArea.js for viewing images\n      })\n      .catch(err => { // then print response status\n      //  toast.error('upload fail')\n      console.log(\"Upload fail\"+err)\n      })\n\n    }\n\n\n    componentDidMount(){\n    // set UserName\n      console.log(this.props.location.state.userName);\n    }\n\n  render() {\n    return (\n      <div class=\"container\">\n\t      <div class=\"row\">\n      \t  <div class=\"offset-md-3 col-md-6\">\n               <div class=\"form-group files\">\n                <label>Upload Your File </label>\n                <input id=\"input_upload\" type=\"file\" class=\"form-control\" multiple onChange={this.onChangeHandler}/>\n              </div>\n              <div class=\"form-group\">\n\n              <Progress max=\"100\" color=\"success\" value={this.state.loaded} >{Math.round(this.state.loaded,2) }%</Progress>\n\n              </div>\n\n              <button type=\"button\" class=\"buttonclass\" onClick={this.onClickHandler}>Upload</button>\n              <button type=\"button\" class=\"buttonclass\" onClick={this.RedirecToEditPage}>View Images</button>\n              <button type=\"button\" class=\"buttonclass\" onClick={this.RedirecToEditPage}>Log out</button>\n\n\t      </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default UploadMultipleFiles;\n"]},"metadata":{},"sourceType":"module"}