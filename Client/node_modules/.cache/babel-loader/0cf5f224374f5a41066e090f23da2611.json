{"ast":null,"code":"var _jsxFileName = \"/Users/anirudhrv/Desktop/Misc/InteractiveImageAnnotation/Application/ImageAnnotation/Client/src/SPA_components/UploadMultipleFiles.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Progress } from 'reactstrap';\n\nclass UploadMultipleFiles extends Component {\n  constructor(props) {\n    super(props);\n\n    this.checkMimeType = event => {\n      //getting file object\n      let files = event.target.files; //define message container\n\n      let err = []; // list allow mime type\n\n      const types = ['image/png', 'image/jpeg', 'image/gif']; // loop access array\n\n      for (var x = 0; x < files.length; x++) {\n        // compare file type find doesn't matach\n        if (types.every(type => files[x].type !== type)) {\n          // create error message and assign to container\n          err[x] = files[x].type + ' is not a supported format\\n';\n        }\n      }\n\n      ;\n\n      for (var z = 0; z < err.length; z++) {\n        // if message not same old that mean has error\n        // discard selected file\n        event.target.value = null;\n      }\n\n      return true;\n    };\n\n    this.maxSelectFile = event => {\n      let files = event.target.files;\n\n      if (files.length > 10) {\n        const msg = 'Only 10 images can be uploaded at a time';\n        event.target.value = null;\n        return false;\n      }\n\n      return true;\n    };\n\n    this.checkFileSize = event => {\n      let files = event.target.files;\n      let size = 2000000;\n      let err = [];\n\n      for (var x = 0; x < files.length; x++) {\n        if (files[x].size > size) {\n          err[x] = files[x].type + 'is too large, please pick a smaller file\\n';\n        }\n      }\n\n      ;\n\n      for (var z = 0; z < err.length; z++) {\n        // if message not same old that mean has error\n        // discard selected file\n        event.target.value = null;\n      }\n\n      return true;\n    };\n\n    this.addToBackendUsingApi = files => {\n      if (this.UserName) {\n        var userName = this.UserName.value;\n      }\n\n      var fileNames = userName + \",\";\n      console.log(fileNames);\n\n      for (var x = 0; x < files.length - 1; x++) {\n        fileNames = fileNames + files[x].name + \",\";\n      }\n\n      fileNames = fileNames + files[files.length - 1].name;\n      console.log(fileNames); // api call\n\n      console.log(\"Calling Go api to insert data\");\n      axios.post(\"http://localhost:8080/insertimagedata\", fileNames).then(res => {\n        // then print response status\n        //toast.success('upload success')\n        console.log(\"API message : \");\n        console.log(res);\n        console.log(res.data[\"message\"]);\n\n        if (this.DataRetrieved) {\n          this.DataRetrieved.innerHTML = res.data[\"message\"];\n        }\n      }).catch(err => {\n        // then print response status\n        //  toast.error('upload fail')\n        console.log(\"fail\");\n        console.log(err);\n      });\n    };\n\n    this.onChangeHandler = event => {\n      var files = event.target.files;\n\n      if (this.maxSelectFile(event) && this.checkMimeType(event) && this.checkFileSize(event)) {\n        // if return true allow to setState\n        this.setState({\n          selectedFile: files,\n          loaded: 0\n        });\n      }\n    };\n\n    this.onClickHandler = () => {\n      const data = new FormData();\n\n      if (this.UserName) {\n        var userName = this.UserName.value;\n      }\n\n      console.log(typeof this.state.selectedFile);\n      console.log(Object.getOwnPropertyNames(this.state.selectedFile));\n\n      for (var x = 0; x < this.state.selectedFile.length; x++) {\n        this.state.selectedFile[x].name = userName + \"_\" + this.state.selectedFile.name;\n      }\n\n      for (var x = 0; x < this.state.selectedFile.length; x++) {\n        data.append('file', this.state.selectedFile[x]);\n      }\n\n      axios.post(\"http://localhost:4000/upload\", data, {\n        onUploadProgress: ProgressEvent => {\n          this.setState({\n            loaded: ProgressEvent.loaded / ProgressEvent.total * 100\n          });\n        }\n      }).then(res => {\n        // then print response status\n        //toast.success('upload success')\n        this.addToBackendUsingApi(this.state.selectedFile);\n        console.log(\"Upload success\");\n      }).catch(err => {\n        // then print response status\n        //  toast.error('upload fail')\n        console.log(\"Upload fail\");\n      });\n    };\n\n    this.state = {\n      selectedFile: null,\n      loaded: 0\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      class: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"offset-md-3 col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"User Name:\", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      ref: c => this.UserName = c,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      class: \"form-group files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Upload Your File \"), React.createElement(\"input\", {\n      type: \"file\",\n      class: \"form-control\",\n      multiple: true,\n      onChange: this.onChangeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      class: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(Progress, {\n      max: \"100\",\n      color: \"success\",\n      value: this.state.loaded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, Math.round(this.state.loaded, 2), \"%\")), React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-success btn-block\",\n      onClick: this.onClickHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Upload\"))));\n  }\n\n}\n\nexport default UploadMultipleFiles;","map":{"version":3,"sources":["/Users/anirudhrv/Desktop/Misc/InteractiveImageAnnotation/Application/ImageAnnotation/Client/src/SPA_components/UploadMultipleFiles.js"],"names":["React","Component","axios","Progress","UploadMultipleFiles","constructor","props","checkMimeType","event","files","target","err","types","x","length","every","type","z","value","maxSelectFile","msg","checkFileSize","size","addToBackendUsingApi","UserName","userName","fileNames","console","log","name","post","then","res","data","DataRetrieved","innerHTML","catch","onChangeHandler","setState","selectedFile","loaded","onClickHandler","FormData","state","Object","getOwnPropertyNames","append","onUploadProgress","ProgressEvent","total","render","c","Math","round"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,YAAvB;;AAGA,MAAMC,mBAAN,SAAkCH,SAAlC,CAA4C;AAC1CI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAQnBC,aARmB,GAQJC,KAAD,IAAS;AACrB;AACA,UAAIC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAAzB,CAFqB,CAGrB;;AACA,UAAIE,GAAG,GAAG,EAAV,CAJqB,CAKrB;;AACD,YAAMC,KAAK,GAAG,CAAC,WAAD,EAAc,YAAd,EAA4B,WAA5B,CAAd,CANsB,CAOrB;;AACA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACJ,KAAK,CAACK,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AACnC;AACI,YAAID,KAAK,CAACG,KAAN,CAAYC,IAAI,IAAIP,KAAK,CAACI,CAAD,CAAL,CAASG,IAAT,KAAkBA,IAAtC,CAAJ,EAAiD;AACjD;AACAL,UAAAA,GAAG,CAACE,CAAD,CAAH,GAASJ,KAAK,CAACI,CAAD,CAAL,CAASG,IAAT,GAAc,8BAAvB;AACD;AACF;;AAAA;;AACD,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACN,GAAG,CAACG,MAArB,EAA6BG,CAAC,EAA9B,EAAkC;AAAC;AAC/B;AACDT,QAAAA,KAAK,CAACE,MAAN,CAAaQ,KAAb,GAAqB,IAArB;AACH;;AACF,aAAO,IAAP;AACA,KA5BkB;;AAAA,SA6BnBC,aA7BmB,GA6BJX,KAAD,IAAS;AACrB,UAAIC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAAzB;;AACI,UAAIA,KAAK,CAACK,MAAN,GAAe,EAAnB,EAAuB;AACpB,cAAMM,GAAG,GAAG,0CAAZ;AACAZ,QAAAA,KAAK,CAACE,MAAN,CAAaQ,KAAb,GAAqB,IAArB;AACA,eAAO,KAAP;AACJ;;AACH,aAAO,IAAP;AACF,KArCmB;;AAAA,SAsCpBG,aAtCoB,GAsCLb,KAAD,IAAS;AACtB,UAAIC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAAzB;AACA,UAAIa,IAAI,GAAG,OAAX;AACA,UAAIX,GAAG,GAAG,EAAV;;AACA,WAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACJ,KAAK,CAACK,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AACpC,YAAIJ,KAAK,CAACI,CAAD,CAAL,CAASS,IAAT,GAAgBA,IAApB,EAA0B;AACzBX,UAAAA,GAAG,CAACE,CAAD,CAAH,GAASJ,KAAK,CAACI,CAAD,CAAL,CAASG,IAAT,GAAc,4CAAvB;AACD;AACD;;AAAA;;AACD,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACN,GAAG,CAACG,MAArB,EAA6BG,CAAC,EAA9B,EAAkC;AAAC;AACjC;AACDT,QAAAA,KAAK,CAACE,MAAN,CAAaQ,KAAb,GAAqB,IAArB;AACA;;AACD,aAAO,IAAP;AACC,KApDoB;;AAAA,SAuDnBK,oBAvDmB,GAuDKd,KAAD,IAAU;AAE7B,UAAG,KAAKe,QAAR,EAAkB;AACf,YAAIC,QAAQ,GAAG,KAAKD,QAAL,CAAcN,KAA7B;AACF;;AACD,UAAIQ,SAAS,GAAGD,QAAQ,GAAC,GAAzB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;;AACA,WAAI,IAAIb,CAAC,GAAE,CAAX,EAAcA,CAAC,GAACJ,KAAK,CAACK,MAAN,GAAa,CAA7B,EAA+BD,CAAC,EAAhC,EACA;AACEa,QAAAA,SAAS,GAAGA,SAAS,GAAEjB,KAAK,CAACI,CAAD,CAAL,CAASgB,IAApB,GAA0B,GAAtC;AACD;;AACDH,MAAAA,SAAS,GAAGA,SAAS,GAAGjB,KAAK,CAACA,KAAK,CAACK,MAAN,GAAa,CAAd,CAAL,CAAsBe,IAA9C;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ,EAZ6B,CAa7B;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACA1B,MAAAA,KAAK,CAAC4B,IAAN,CAAW,uCAAX,EAAmDJ,SAAnD,EACGK,IADH,CACQC,GAAG,IAAI;AAAE;AACb;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACC,IAAJ,CAAS,SAAT,CAAZ;;AACA,YAAG,KAAKC,aAAR,EAAuB;AACtB,eAAKA,aAAL,CAAmBC,SAAnB,GAA+BH,GAAG,CAACC,IAAJ,CAAS,SAAT,CAA/B;AACF;AAEA,OAVH,EAWGG,KAXH,CAWSzB,GAAG,IAAI;AAAE;AAChB;AACAgB,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYjB,GAAZ;AACC,OAfH;AAgBL,KAtFoB;;AAAA,SAwFrB0B,eAxFqB,GAwFL7B,KAAK,IAAE;AACrB,UAAIC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAAzB;;AACA,UAAG,KAAKU,aAAL,CAAmBX,KAAnB,KAA6B,KAAKD,aAAL,CAAmBC,KAAnB,CAA7B,IAA6D,KAAKa,aAAL,CAAmBb,KAAnB,CAAhE,EAA0F;AAC1F;AACG,aAAK8B,QAAL,CAAc;AACdC,UAAAA,YAAY,EAAE9B,KADA;AAEd+B,UAAAA,MAAM,EAAC;AAFO,SAAd;AAIJ;AACA,KAjGoB;;AAAA,SAkGnBC,cAlGmB,GAkGF,MAAM;AACrB,YAAMR,IAAI,GAAG,IAAIS,QAAJ,EAAb;;AAEA,UAAG,KAAKlB,QAAR,EAAkB;AACf,YAAIC,QAAQ,GAAG,KAAKD,QAAL,CAAcN,KAA7B;AACF;;AACDS,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAO,KAAKe,KAAL,CAAWJ,YAA9B;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYgB,MAAM,CAACC,mBAAP,CAA2B,KAAKF,KAAL,CAAWJ,YAAtC,CAAZ;;AAEA,WAAI,IAAI1B,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,KAAK8B,KAAL,CAAWJ,YAAX,CAAwBzB,MAAtC,EAA6CD,CAAC,EAA9C,EAAiD;AAC/C,aAAK8B,KAAL,CAAWJ,YAAX,CAAwB1B,CAAxB,EAA2BgB,IAA3B,GAAkCJ,QAAQ,GAAG,GAAX,GAAiB,KAAKkB,KAAL,CAAWJ,YAAX,CAAwBV,IAA3E;AACD;;AAED,WAAI,IAAIhB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAC,KAAK8B,KAAL,CAAWJ,YAAX,CAAwBzB,MAAzC,EAAiDD,CAAC,EAAlD,EAAsD;AACpDoB,QAAAA,IAAI,CAACa,MAAL,CAAY,MAAZ,EAAoB,KAAKH,KAAL,CAAWJ,YAAX,CAAwB1B,CAAxB,CAApB;AACD;;AACDX,MAAAA,KAAK,CAAC4B,IAAN,CAAW,8BAAX,EAA2CG,IAA3C,EAAiD;AAC/Cc,QAAAA,gBAAgB,EAAEC,aAAa,IAAI;AACjC,eAAKV,QAAL,CAAc;AACZE,YAAAA,MAAM,EAAGQ,aAAa,CAACR,MAAd,GAAuBQ,aAAa,CAACC,KAArC,GAA2C;AADxC,WAAd;AAGD;AAL8C,OAAjD,EAOGlB,IAPH,CAOQC,GAAG,IAAI;AAAE;AACb;AACA,aAAKT,oBAAL,CAA0B,KAAKoB,KAAL,CAAWJ,YAArC;AACAZ,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD,OAXH,EAYGQ,KAZH,CAYSzB,GAAG,IAAI;AAAE;AAChB;AACAgB,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACC,OAfH;AAgBC,KAlIgB;;AAEf,SAAKe,KAAL,GAAa;AACXJ,MAAAA,YAAY,EAAE,IADH;AAEXC,MAAAA,MAAM,EAAC;AAFI,KAAb;AAKH;;AA6HDU,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,KAAK,EAAC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAK,MAAA,KAAK,EAAC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,KAAK,EAAC,sBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,GAAG,EAAIC,CAAC,IAAI,KAAK3B,QAAL,GAAgB2B,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,CADE,CADD,EAUM;AAAK,MAAA,KAAK,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADD,EAEC;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAC,cAAzB;AAAwC,MAAA,QAAQ,MAAhD;AAAiD,MAAA,QAAQ,EAAE,KAAKd,eAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,CAVN,EAcK;AAAK,MAAA,KAAK,EAAC,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAC,KAAd;AAAoB,MAAA,KAAK,EAAC,SAA1B;AAAoC,MAAA,KAAK,EAAE,KAAKM,KAAL,CAAWH,MAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgEY,IAAI,CAACC,KAAL,CAAW,KAAKV,KAAL,CAAWH,MAAtB,EAA6B,CAA7B,CAAhE,MAFA,CAdL,EAoBK;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,KAAK,EAAC,2BAA5B;AAAwD,MAAA,OAAO,EAAE,KAAKC,cAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBApBL,CADF,CADD,CADF;AA6BD;;AAnKyC;;AAsK5C,eAAerC,mBAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport {Progress} from 'reactstrap';\n\n\nclass UploadMultipleFiles extends Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        selectedFile: null,\n        loaded:0\n      }\n\n  }\n  checkMimeType=(event)=>{\n    //getting file object\n    let files = event.target.files\n    //define message container\n    let err = []\n    // list allow mime type\n   const types = ['image/png', 'image/jpeg', 'image/gif']\n    // loop access array\n    for(var x = 0; x<files.length; x++) {\n     // compare file type find doesn't matach\n         if (types.every(type => files[x].type !== type)) {\n         // create error message and assign to container\n         err[x] = files[x].type+' is not a supported format\\n';\n       }\n     };\n     for(var z = 0; z<err.length; z++) {// if message not same old that mean has error\n         // discard selected file\n        event.target.value = null\n    }\n   return true;\n  }\n  maxSelectFile=(event)=>{\n    let files = event.target.files\n        if (files.length > 10) {\n           const msg = 'Only 10 images can be uploaded at a time'\n           event.target.value = null\n           return false;\n      }\n    return true;\n }\n checkFileSize=(event)=>{\n  let files = event.target.files\n  let size = 2000000\n  let err = [];\n  for(var x = 0; x<files.length; x++) {\n  if (files[x].size > size) {\n   err[x] = files[x].type+'is too large, please pick a smaller file\\n';\n }\n};\nfor(var z = 0; z<err.length; z++) {// if message not same old that mean has error\n  // discard selected file\n event.target.value = null\n}\nreturn true;\n}\n\n// using Api, add names of the images being uploaded to a database\n  addToBackendUsingApi = (files) =>{\n\n      if(this.UserName) {\n         var userName = this.UserName.value;\n      }\n      var fileNames = userName+\",\";\n      console.log(fileNames);\n      for(var x =0; x<files.length-1;x++)\n      {\n        fileNames = fileNames +files[x].name+ \",\";\n      }\n      fileNames = fileNames + files[files.length-1].name;\n      console.log(fileNames);\n      // api call\n      console.log(\"Calling Go api to insert data\")\n      axios.post(\"http://localhost:8080/insertimagedata\",fileNames)\n        .then(res => { // then print response status\n          //toast.success('upload success')\n          console.log(\"API message : \")\n          console.log(res)\n          console.log(res.data[\"message\"])\n          if(this.DataRetrieved) {\n           this.DataRetrieved.innerHTML = res.data[\"message\"];\n        }\n\n        })\n        .catch(err => { // then print response status\n        //  toast.error('upload fail')\n        console.log(\"fail\")\n        console.log(err)\n        })\n}\n\nonChangeHandler=event=>{\n  var files = event.target.files\n  if(this.maxSelectFile(event) && this.checkMimeType(event) &&    this.checkFileSize(event)){\n  // if return true allow to setState\n     this.setState({\n     selectedFile: files,\n     loaded:0\n  })\n}\n}\n  onClickHandler = () => {\n    const data = new FormData()\n\n    if(this.UserName) {\n       var userName = this.UserName.value;\n    }\n    console.log(typeof this.state.selectedFile);\n    console.log(Object.getOwnPropertyNames(this.state.selectedFile));\n\n    for(var x=0;x<this.state.selectedFile.length;x++){\n      this.state.selectedFile[x].name = userName + \"_\" + this.state.selectedFile.name;\n    }\n\n    for(var x = 0; x<this.state.selectedFile.length; x++) {\n      data.append('file', this.state.selectedFile[x])\n    }\n    axios.post(\"http://localhost:4000/upload\", data, {\n      onUploadProgress: ProgressEvent => {\n        this.setState({\n          loaded: (ProgressEvent.loaded / ProgressEvent.total*100),\n        })\n      },\n    })\n      .then(res => { // then print response status\n        //toast.success('upload success')\n        this.addToBackendUsingApi(this.state.selectedFile)\n        console.log(\"Upload success\")\n      })\n      .catch(err => { // then print response status\n      //  toast.error('upload fail')\n      console.log(\"Upload fail\")\n      })\n    }\n\n  render() {\n    return (\n      <div class=\"container\">\n\t      <div class=\"row\">\n      \t  <div class=\"offset-md-3 col-md-6\">\n          <div>\n        <form>\n          <label>\n            User Name:\n            <input type=\"text\" name=\"name\" ref = {c => this.UserName = c}/>\n          </label>\n        </form>\n        </div>\n\n               <div class=\"form-group files\">\n                <label>Upload Your File </label>\n                <input type=\"file\" class=\"form-control\" multiple onChange={this.onChangeHandler}/>\n              </div>\n              <div class=\"form-group\">\n\n              <Progress max=\"100\" color=\"success\" value={this.state.loaded} >{Math.round(this.state.loaded,2) }%</Progress>\n\n              </div>\n\n              <button type=\"button\" class=\"btn btn-success btn-block\" onClick={this.onClickHandler}>Upload</button>\n\n\t      </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default UploadMultipleFiles;\n"]},"metadata":{},"sourceType":"module"}